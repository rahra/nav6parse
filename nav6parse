#!/usr/bin/perl

#** Copyright 2021 Bernhard R. Fischer, 4096R/8E24F29D <bf@abenteuerland.at>
#
# This file is part of nav6parse.
#
# Nav6parse is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 3 of the License.
#
# Nav6parse is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with smrender. If not, see <http://www.gnu.org/licenses/>.
#*

#** @file nav6parse
# This small Perl program converts user data generated by a Seatec NAV6 chart
# plotter into the well-known GPX format. It reads the data from standard input
# and outputs the GPX data to standard output. Thus just run it as follows:
# ./nav6parse <kpxx99.odf >kpxx99.gpx
# The resulting file can then be imported into any GPX-aware software (e.g.
# Goolge Earth).
#
# @author Bernhard R. Fischer, <bf@abenteuerland.at>
# @date 2021/06/01
#*


use strict;
use warnings;


# output GPX header
sub gpx_start
{
   print <<'!';
<?xml version="1.0" encoding="UTF-8"?>
<gpx xmlns="http://www.topografix.com/GPX/1/1" creator="nav6parse" version="1.1"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd">
!
}


# output GPX end tag
sub gpx_end
{
   print "</gpx>\n";
}


# convert string to latitude
sub latitude
{
   my $lat = shift;
   if ($lat =~ /^([0-9]+)D([0-9\.]+)([NS])$/)
   {
      $lat = $1 + $2 / 60;
      $lat = -$lat if $3 eq "S";
   }
   return $lat;
}


# convert string to longitude
sub longitude
{
   my $lon = shift;
   if ($lon =~ /^([0-9]+)D([0-9\.]+)([EW])$/)
   {
      $lon = $1 + $2 / 60;
      $lon = -$lon if $3 eq "W";
   }
   return $lon;
} 


# declare and init some varibles
my $section = "";
my $track;
my $trackdate;
my @ldata;
my $lineno = 0;


gpx_start();


while (<STDIN>)
{
   # input file line counter
   $lineno++;

   # trim input data
   chomp;
   s/\$(.*)\*$/$1/;

   # split input line into array
   @ldata = split /,/;

   # check if file header found
   if ($ldata[0] eq "VERSION")
   {
      print "<!-- NAV6 file header '@ldata' -->\n";
      next;
   }

   # check for end of data
   if ($ldata[0] eq "ENDDATA")
   {
      print "<!-- $ldata[0] -->\n";
      next;
   }

   # check if start of track found
   if ($ldata[0] eq "TRK")
   {
      # set currently active section
      $section = $ldata[0];

      # extract track header
      $track = $ldata[1];
      $trackdate = $ldata[2];

      # output track header
      print "<trk>\n<number>$ldata[1]</number>\n<name>$ldata[2]</name>\n<trkseg>\n";
      next;
   }

   # check if start of waypoints found
   if ($ldata[0] eq "WPT")
   {
      # set currently active section
      $section = $ldata[0];
      next;
   }

   # check if end of section found
   if ($ldata[0] eq "END")
   {
      if ($section eq "TRK")
      {
         # output track end tag
         print "</trkseg>\n</trk>\n";
         $track = "";
      }
      elsif ($section eq "WPT")
      {
         # nothing to do here, just avoid "else"
      }
      else
      {
         print STDERR "* line $lineno unknown END\n";
      }

      # clear current section
      $section = "";
      next;
   }

   # check if data should be track data
   if ($section eq "TRK")
   {
      # ignore empty tuples
      next if $ldata[1] eq "E";

      # extract coordinates
      my $lat = latitude($ldata[2]);
      my $lon = longitude($ldata[3]);

      #output trackpoint
      print "<trkpt lat=\"$lat\" lon=\"$lon\"></trkpt>\n";
      next;
   }

   # check if data should be waypoint data
   if ($section eq "WPT")
   {
      # extract coordinates
      my $lat = latitude($ldata[4]);
      my $lon = longitude($ldata[5]);

      # output waypoint
      print "<wpt lat=\"$lat\" lon=\"$lon\"><name>$ldata[1]</name></wpt>\n";
      next;
   }

   # some yet unknown data found
   print STDERR "* line $lineno unknown section $section ($ldata[0])\n";
}

# end gpx data
gpx_end();

